package com.fsryan.annotationprocessor.generator.code;

import com.fsryan.forsuredb.api.Conjunction;
import com.fsryan.forsuredb.api.Finder;

/**
 * <p>
 *   This is an auto-generated class. DO NOT modify it!
 * </p>
 * <p>
 *   Provides methods for creating a query that will query the test_table_3
 *   table. These methods can be chained to produce just about any query you
 *   may want, for example:
 *   <pre>
 *     {@code
 *             testTable3().find()
 *             .byIdBetweenInclusive(23545494583L)
 *             .andInclusive(23545494583L)
 *             .byCreatedBefore(new Date())
 *             .then()
 *             .get();
 *     }
 *   </pre>
 *   The above will create the following query:
 *   SELECT * FROM test_table_3 where _id >= 23545494583 AND _id <= 23545494583 AND created < [the system time]
 * </p>
 * @author <a href="https://github.com/ryansgot/forsuredbcompiler">forsuredbcompiler</a>
 * @see Resolver
 */
public class TestTable3Finder<R extends TestTable3Resolver> extends Finder<R, TestTable3Finder<R>> {
    TestTable3Finder(R resolver) {
        super(resolver);
    }

    /**
     * <p>
     *   add criteria to a query that requires exactMatch for app_rating
     * </p>
     * @param exactMatch
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byAppRating(double exactMatch,
            double... orExactMatches) {
        whereElements.add(Finder.WhereElement.START_GROUP);
        addToBuf("app_rating", OP_EQ, exactMatch);
        for(int i = 0; i < (orExactMatches == null ? 0 : orExactMatches.length); i++) {
            whereElements.add(Finder.WhereElement.OR);
            addToBuf("app_rating", OP_EQ, orExactMatches[i]);
        }
        whereElements.add(Finder.WhereElement.END_GROUP);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires exclusion for app_rating
     * </p>
     * @param exclusion
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byAppRatingNot(double exclusion,
            double... furtherExclusions) {
        whereElements.add(Finder.WhereElement.START_GROUP);
        addToBuf("app_rating", OP_NE, exclusion);
        for(int i = 0; i < (furtherExclusions == null ? 0 : furtherExclusions.length); i++) {
            whereElements.add(Finder.WhereElement.AND);
            addToBuf("app_rating", OP_NE, furtherExclusions[i]);
        }
        whereElements.add(Finder.WhereElement.END_GROUP);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires nonInclusiveUpperBound for app_rating
     * </p>
     * @param nonInclusiveUpperBound
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byAppRatingLessThan(double nonInclusiveUpperBound) {
        addToBuf("app_rating", OP_LT, nonInclusiveUpperBound);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires nonInclusiveLowerBound for app_rating
     * </p>
     * @param nonInclusiveLowerBound
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byAppRatingGreaterThan(double nonInclusiveLowerBound) {
        addToBuf("app_rating", OP_GT, nonInclusiveLowerBound);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires inclusiveUpperBound for app_rating
     * </p>
     * @param inclusiveUpperBound
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byAppRatingLessThanInclusive(double inclusiveUpperBound) {
        addToBuf("app_rating", OP_LE, inclusiveUpperBound);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires inclusiveLowerBound for app_rating
     * </p>
     * @param inclusiveLowerBound
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byAppRatingGreaterThanInclusive(double inclusiveLowerBound) {
        addToBuf("app_rating", OP_GE, inclusiveLowerBound);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires nonInclusiveLowerBound for app_rating
     * </p>
     * @param nonInclusiveLowerBound
     * @return a {@link com.fsryan.forsuredb.api.Finder.Between} that allows you to provide an upper bound for this criteria
     */
    public Finder.Between<R, TestTable3Finder<R>> byAppRatingBetween(double nonInclusiveLowerBound) {
        addToBuf("app_rating", OP_GT, nonInclusiveLowerBound);
        return createBetween(double.class, "app_rating");
    }

    /**
     * <p>
     *   add criteria to a query that requires inclusiveLowerBound for app_rating
     * </p>
     * @param inclusiveLowerBound
     * @return a {@link com.fsryan.forsuredb.api.Finder.Between} that allows you to provide an upper bound for this criteria
     */
    public Finder.Between<R, TestTable3Finder<R>> byAppRatingBetweenInclusive(double inclusiveLowerBound) {
        addToBuf("app_rating", OP_GE, inclusiveLowerBound);
        return createBetween(double.class, "app_rating");
    }

    /**
     * <p>
     *   add criteria to a query that requires exactMatch for global_id
     * </p>
     * @param exactMatch
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byGlobalId(long exactMatch,
            long... orExactMatches) {
        whereElements.add(Finder.WhereElement.START_GROUP);
        addToBuf("global_id", OP_EQ, exactMatch);
        for(int i = 0; i < (orExactMatches == null ? 0 : orExactMatches.length); i++) {
            whereElements.add(Finder.WhereElement.OR);
            addToBuf("global_id", OP_EQ, orExactMatches[i]);
        }
        whereElements.add(Finder.WhereElement.END_GROUP);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires exclusion for global_id
     * </p>
     * @param exclusion
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byGlobalIdNot(long exclusion,
            long... furtherExclusions) {
        whereElements.add(Finder.WhereElement.START_GROUP);
        addToBuf("global_id", OP_NE, exclusion);
        for(int i = 0; i < (furtherExclusions == null ? 0 : furtherExclusions.length); i++) {
            whereElements.add(Finder.WhereElement.AND);
            addToBuf("global_id", OP_NE, furtherExclusions[i]);
        }
        whereElements.add(Finder.WhereElement.END_GROUP);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires nonInclusiveUpperBound for global_id
     * </p>
     * @param nonInclusiveUpperBound
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byGlobalIdLessThan(long nonInclusiveUpperBound) {
        addToBuf("global_id", OP_LT, nonInclusiveUpperBound);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires nonInclusiveLowerBound for global_id
     * </p>
     * @param nonInclusiveLowerBound
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byGlobalIdGreaterThan(long nonInclusiveLowerBound) {
        addToBuf("global_id", OP_GT, nonInclusiveLowerBound);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires inclusiveUpperBound for global_id
     * </p>
     * @param inclusiveUpperBound
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byGlobalIdLessThanInclusive(long inclusiveUpperBound) {
        addToBuf("global_id", OP_LE, inclusiveUpperBound);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires inclusiveLowerBound for global_id
     * </p>
     * @param inclusiveLowerBound
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byGlobalIdGreaterThanInclusive(long inclusiveLowerBound) {
        addToBuf("global_id", OP_GE, inclusiveLowerBound);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires nonInclusiveLowerBound for global_id
     * </p>
     * @param nonInclusiveLowerBound
     * @return a {@link com.fsryan.forsuredb.api.Finder.Between} that allows you to provide an upper bound for this criteria
     */
    public Finder.Between<R, TestTable3Finder<R>> byGlobalIdBetween(long nonInclusiveLowerBound) {
        addToBuf("global_id", OP_GT, nonInclusiveLowerBound);
        return createBetween(long.class, "global_id");
    }

    /**
     * <p>
     *   add criteria to a query that requires inclusiveLowerBound for global_id
     * </p>
     * @param inclusiveLowerBound
     * @return a {@link com.fsryan.forsuredb.api.Finder.Between} that allows you to provide an upper bound for this criteria
     */
    public Finder.Between<R, TestTable3Finder<R>> byGlobalIdBetweenInclusive(long inclusiveLowerBound) {
        addToBuf("global_id", OP_GE, inclusiveLowerBound);
        return createBetween(long.class, "global_id");
    }

    /**
     * <p>
     *   add criteria to a query that requires exactMatch for login_count
     * </p>
     * @param exactMatch
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byLoginCount(int exactMatch,
            int... orExactMatches) {
        whereElements.add(Finder.WhereElement.START_GROUP);
        addToBuf("login_count", OP_EQ, exactMatch);
        for(int i = 0; i < (orExactMatches == null ? 0 : orExactMatches.length); i++) {
            whereElements.add(Finder.WhereElement.OR);
            addToBuf("login_count", OP_EQ, orExactMatches[i]);
        }
        whereElements.add(Finder.WhereElement.END_GROUP);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires exclusion for login_count
     * </p>
     * @param exclusion
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byLoginCountNot(int exclusion,
            int... furtherExclusions) {
        whereElements.add(Finder.WhereElement.START_GROUP);
        addToBuf("login_count", OP_NE, exclusion);
        for(int i = 0; i < (furtherExclusions == null ? 0 : furtherExclusions.length); i++) {
            whereElements.add(Finder.WhereElement.AND);
            addToBuf("login_count", OP_NE, furtherExclusions[i]);
        }
        whereElements.add(Finder.WhereElement.END_GROUP);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires nonInclusiveUpperBound for login_count
     * </p>
     * @param nonInclusiveUpperBound
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byLoginCountLessThan(int nonInclusiveUpperBound) {
        addToBuf("login_count", OP_LT, nonInclusiveUpperBound);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires nonInclusiveLowerBound for login_count
     * </p>
     * @param nonInclusiveLowerBound
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byLoginCountGreaterThan(int nonInclusiveLowerBound) {
        addToBuf("login_count", OP_GT, nonInclusiveLowerBound);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires inclusiveUpperBound for login_count
     * </p>
     * @param inclusiveUpperBound
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byLoginCountLessThanInclusive(int inclusiveUpperBound) {
        addToBuf("login_count", OP_LE, inclusiveUpperBound);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires inclusiveLowerBound for login_count
     * </p>
     * @param inclusiveLowerBound
     * @return a {@link com.fsryan.forsuredb.api.Conjunction.GroupableAndOr} that allows you to continue adding more query criteria
     */
    public Conjunction.GroupableAndOr<R, TestTable3Finder<R>> byLoginCountGreaterThanInclusive(int inclusiveLowerBound) {
        addToBuf("login_count", OP_GE, inclusiveLowerBound);
        return conjunction;
    }

    /**
     * <p>
     *   add criteria to a query that requires nonInclusiveLowerBound for login_count
     * </p>
     * @param nonInclusiveLowerBound
     * @return a {@link com.fsryan.forsuredb.api.Finder.Between} that allows you to provide an upper bound for this criteria
     */
    public Finder.Between<R, TestTable3Finder<R>> byLoginCountBetween(int nonInclusiveLowerBound) {
        addToBuf("login_count", OP_GT, nonInclusiveLowerBound);
        return createBetween(int.class, "login_count");
    }

    /**
     * <p>
     *   add criteria to a query that requires inclusiveLowerBound for login_count
     * </p>
     * @param inclusiveLowerBound
     * @return a {@link com.fsryan.forsuredb.api.Finder.Between} that allows you to provide an upper bound for this criteria
     */
    public Finder.Between<R, TestTable3Finder<R>> byLoginCountBetweenInclusive(int inclusiveLowerBound) {
        addToBuf("login_count", OP_GE, inclusiveLowerBound);
        return createBetween(int.class, "login_count");
    }
}
