package com.fsryan.annotationprocessor.generator.code;

import com.fsryan.forsuredb.annotationprocessor.generator.code.ResolverGeneratorTest;
import com.fsryan.forsuredb.api.FSJoin;
import com.fsryan.forsuredb.api.FSProjection;
import com.fsryan.forsuredb.api.ForSureInfoFactory;
import com.fsryan.forsuredb.api.Resolver;
import com.fsryan.forsuredb.api.Retriever;
import com.fsryan.forsuredb.api.TypedRecordContainer;
import com.google.common.collect.BiMap;
import com.google.common.collect.ImmutableBiMap;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;

/**
 * <p>
 *   This is an auto-generated class. DO NOT modify it!
 * </p>
 * <p>
 *   Entry point for querying the test_table_2 table. You can access
 *   this {@link com.fsryan.forsuredb.api.Resolver} via the generated static
 *   method in the ForSure class:
 *   <pre>
 *     {@code
 *             ForSure.testTable2().find()
 *             .byIdLessThan(23545494583L)
 *             .then()
 *             .get();
 *     }
 *   </pre>
 * </p>
 * @author <a href="https://github.com/ryansgot/forsuredbcompiler">forsuredbcompiler</a>
 * @see Resolver
 */
public abstract class TestTable2Resolver<T extends TestTable2Resolver> extends Resolver<T, ResolverGeneratorTest, TypedRecordContainer, TestTable2, TestTable2Setter, TestTable2Finder<T>, TestTable2OrderBy<T>> {
    public static final String TABLE_NAME = "test_table_2";

    public static final String[] columns = {"_id","created","deleted","modified","test_table_3_id",};

    public static final FSProjection PROJECTION = new FSProjection() {
        @Override
        public String tableName() {
            return TABLE_NAME;
        }

        @Override
        public String[] columns() {
            return columns;
        }
    };

    private static final ImmutableBiMap<String, String> COLUMN_TO_METHOD_NAME_BI_MAP = new ImmutableBiMap.Builder<String, String>()
            .put("_id", "id")
            .put("created", "created")
            .put("deleted", "deleted")
            .put("modified", "modified")
            .put("test_table_3_id", "testTable3Id")
            .build();

    public TestTable2Resolver(ForSureInfoFactory infoFactory) {
        super(infoFactory);
    }

    @Override
    public BiMap<String, String> columnNameToMethodNameBiMap() {
        return COLUMN_TO_METHOD_NAME_BI_MAP;
    }

    /**
     * <p>
     *   Add a join to test_table_3 on test_table_2.test_table_3_id = test_table_3._id
     *   to the query
     * </p>
     */
    public JoinTestTable3<T> joinTestTable3(final FSJoin.Type type) {
        addJoin(new FSJoin(type, "test_table_3", "_id", "test_table_2", "test_table_3_id"), TestTable3Resolver.PROJECTION);
        return new JoinTestTable3(infoFactory, this);
    }

    /**
     * <p>
     *   Add a join to test_table on test_table.test_table_2_id = test_table_2._id
     *   to the query
     * </p>
     */
    public JoinTestTable<T> joinTestTable(final FSJoin.Type type) {
        addJoin(new FSJoin(type, "test_table_2", "_id", "test_table", "test_table_2_id"), TestTableResolver.PROJECTION);
        return new JoinTestTable(infoFactory, this);
    }

    @Override
    public Class<TestTable2> getApiClass() {
        return TestTable2.class;
    }

    @Override
    public Class<TestTable2Setter> setApiClass() {
        return TestTable2Setter.class;
    }

    @Override
    public FSProjection projection() {
        return PROJECTION;
    }

    @Override
    protected TestTable2Finder newFinderInstance() {
        return new TestTable2Finder(this);
    }

    @Override
    protected TestTable2OrderBy newOrderByInstance() {
        return new TestTable2OrderBy(this);
    }

    @Override
    public String tableName() {
        return TABLE_NAME;
    }

    public static class Base extends TestTable2Resolver<Base> {
        public Base(ForSureInfoFactory infoFactory) {
            super(infoFactory);
        }
    }

    /**
     * <p>
     *   Changes contexts from the test_table_2 table's Resolver context to the test_table_3 table's Resolver context
     *   You can exit the test_table_3 table's Resolver context by calling the then() method.
     * </p>
     */
    public static class JoinTestTable3<T extends TestTable2Resolver> extends TestTable3Resolver<JoinTestTable3<T>> {
        private final T parent;

        JoinTestTable3(ForSureInfoFactory<ResolverGeneratorTest, TypedRecordContainer> infoFactory, T parent) {
            super(infoFactory);
            this.parent = parent;
        }

        @Override
        public Retriever get() {
            return then().get();
        }

        @Override
        public Retriever preserveQueryStateAndGet() {
            return then().preserveQueryStateAndGet();
        }

        public T then() {
            joinResolvers(parent, this);
            return parent;
        }

        @Override
        protected void addJoin(FSJoin join, FSProjection foreignTableProjection) {
            parent.addJoin(join, foreignTableProjection);
        }
    }

    /**
     * <p>
     *   Changes contexts from the test_table_2 table's Resolver context to the test_table table's Resolver context
     *   You can exit the test_table table's Resolver context by calling the then() method.
     * </p>
     */
    public static class JoinTestTable<T extends TestTable2Resolver> extends TestTableResolver<JoinTestTable<T>> {
        private final T parent;

        JoinTestTable(ForSureInfoFactory<ResolverGeneratorTest, TypedRecordContainer> infoFactory, T parent) {
            super(infoFactory);
            this.parent = parent;
        }

        @Override
        public Retriever get() {
            return then().get();
        }

        @Override
        public Retriever preserveQueryStateAndGet() {
            return then().preserveQueryStateAndGet();
        }

        public T then() {
            joinResolvers(parent, this);
            return parent;
        }

        @Override
        protected void addJoin(FSJoin join, FSProjection foreignTableProjection) {
            parent.addJoin(join, foreignTableProjection);
        }
    }
}
