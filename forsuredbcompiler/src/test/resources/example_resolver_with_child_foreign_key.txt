package com.fsryan.annotationprocessor.generator.code;

import com.fsryan.forsuredb.annotationprocessor.generator.code.ResolverGeneratorTest;
import com.fsryan.forsuredb.api.FSJoin;
import com.fsryan.forsuredb.api.FSProjection;
import com.fsryan.forsuredb.api.ForSureInfoFactory;
import com.fsryan.forsuredb.api.Resolver;
import com.fsryan.forsuredb.api.Retriever;
import com.fsryan.forsuredb.api.TypedRecordContainer;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;

/**
 * <p>
 *   This is an auto-generated class. DO NOT modify it!
 * </p>
 * <p>
 *   Entry point for querying the test_table_3 table. You can access
 *   this {@link com.fsryan.forsuredb.api.Resolver} via the generated static
 *   method in the ForSure class:
 *   <pre>
 *     {@code
 *             ForSure.testTable3().find()
 *             .byIdLessThan(23545494583L)
 *             .then()
 *             .get();
 *     }
 *   </pre>
 * </p>
 * @author <a href="https://github.com/ryansgot/forsuredbcompiler">forsuredbcompiler</a>
 * @see Resolver
 */
public abstract class TestTable3Resolver<T extends TestTable3Resolver> extends Resolver<T, ResolverGeneratorTest, TypedRecordContainer, TestTable3, TestTable3Setter, TestTable3Finder<T>, TestTable3OrderBy<T>> {
    public static final String TABLE_NAME = "test_table_3";

    public static final String[] columns = {"_id","app_rating","competitor_app_rating","created","deleted","global_id","login_count","modified",};

    public static final FSProjection PROJECTION = new FSProjection() {
        @Override
        public String tableName() {
            return TABLE_NAME;
        }

        @Override
        public String[] columns() {
            return columns;
        }

        @Override
        public boolean isDistinct() {
            return false;
        }
    };

    private static final Map<String, String> methodNameToColumnNameMap = new HashMap<String, String>();

    static {
        methodNameToColumnNameMap.put("id", "_id");
        methodNameToColumnNameMap.put("appRating", "app_rating");
        methodNameToColumnNameMap.put("competitorAppRating", "competitor_app_rating");
        methodNameToColumnNameMap.put("created", "created");
        methodNameToColumnNameMap.put("deleted", "deleted");
        methodNameToColumnNameMap.put("globalId", "global_id");
        methodNameToColumnNameMap.put("loginCount", "login_count");
        methodNameToColumnNameMap.put("modified", "modified");
    }

    public TestTable3Resolver(ForSureInfoFactory infoFactory) {
        super(infoFactory);
    }

    @Override
    public Map<String, String> methodNameToColumnNameMap() {
        return methodNameToColumnNameMap;
    }

    /**
     * <p>
     *   Add a join to test_table_2 on test_table_2.test_table_3_id = test_table_3._id
     *   to the query
     * </p>
     */
    public JoinTestTable2<T> joinTestTable2(final FSJoin.Type type) {
        addJoin(new FSJoin(type, "test_table_3", "_id", "test_table_2", "test_table_3_id"));
        return new JoinTestTable2(infoFactory, this);
    }

    @Override
    public Class<TestTable3> getApiClass() {
        return TestTable3.class;
    }

    @Override
    public Class<TestTable3Setter> setApiClass() {
        return TestTable3Setter.class;
    }

    @Override
    public FSProjection projection() {
        return PROJECTION;
    }

    @Override
    protected TestTable3Finder newFinderInstance() {
        return new TestTable3Finder(this);
    }

    @Override
    protected TestTable3OrderBy newOrderByInstance() {
        return new TestTable3OrderBy(this);
    }

    @Override
    public String tableName() {
        return TABLE_NAME;
    }

    public static class Base extends TestTable3Resolver<Base> {
        public Base(ForSureInfoFactory infoFactory) {
            super(infoFactory);
        }
    }

    /**
     * <p>
     *   Changes contexts from the test_table_3 table's Resolver context to the test_table_2 table's Resolver context
     *   You can exit the test_table_2 table's Resolver context by calling the then() method.
     * </p>
     */
    public static class JoinTestTable2<T extends TestTable3Resolver> extends TestTable2Resolver<JoinTestTable2<T>> {
        private final T parent;

        JoinTestTable2(ForSureInfoFactory<ResolverGeneratorTest, TypedRecordContainer> infoFactory, T parent) {
            super(infoFactory);
            this.parent = parent;
        }

        @Override
        public Retriever get() {
            return then().get();
        }

        @Override
        public Retriever preserveQueryStateAndGet() {
            return then().preserveQueryStateAndGet();
        }

        public T then() {
            joinResolvers(parent, this);
            return parent;
        }

        @Override
        protected void addJoin(FSJoin join) {
            parent.addJoin(join);
        }
    }
}
