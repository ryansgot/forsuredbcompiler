package com.fsryan.annotationprocessor.generator.code;

import OrderBy;
import Resolver;
import TypedRecordContainer;

public class TestTable3OrderBy extends OrderBy<OrderByGeneratorTest, TypedRecordContainer, TestTable3, TestTable3Setter, TestTable3Finder, TestTable3OrderBy> {
    TestTable3OrderBy(Resolver<OrderByGeneratorTest, TypedRecordContainer, TestTable3, TestTable3Setter, TestTable3Finder, TestTable3OrderBy> resolver) {
        super(resolver);
    }

    /**
     * <p>
     *   Order the results of the query by app_rating
     * </p>
     * @param order the direction to order the results
     * @return a {@link OrderBy.Conjunction} that allows for either adding to the orderBy or continue
     * adding other query parameters
     */
    public OrderBy.Conjunction<OrderByGeneratorTest, TypedRecordContainer, TestTable3, TestTable3Setter, TestTable3Finder, TestTable3OrderBy> byAppRating(OrderBy.Order order) {
        appendOrder("app_rating", order);
        return conjunction;
    }

    /**
     * <p>
     *   Order the results of the query by competitor_app_rating
     * </p>
     * @param order the direction to order the results
     * @return a {@link OrderBy.Conjunction} that allows for either adding to the orderBy or continue
     * adding other query parameters
     */
    public OrderBy.Conjunction<OrderByGeneratorTest, TypedRecordContainer, TestTable3, TestTable3Setter, TestTable3Finder, TestTable3OrderBy> byCompetitorAppRating(OrderBy.Order order) {
        appendOrder("competitor_app_rating", order);
        return conjunction;
    }

    /**
     * <p>
     *   Order the results of the query by global_id
     * </p>
     * @param order the direction to order the results
     * @return a {@link OrderBy.Conjunction} that allows for either adding to the orderBy or continue
     * adding other query parameters
     */
    public OrderBy.Conjunction<OrderByGeneratorTest, TypedRecordContainer, TestTable3, TestTable3Setter, TestTable3Finder, TestTable3OrderBy> byGlobalId(OrderBy.Order order) {
        appendOrder("global_id", order);
        return conjunction;
    }

    /**
     * <p>
     *   Order the results of the query by login_count
     * </p>
     * @param order the direction to order the results
     * @return a {@link OrderBy.Conjunction} that allows for either adding to the orderBy or continue
     * adding other query parameters
     */
    public OrderBy.Conjunction<OrderByGeneratorTest, TypedRecordContainer, TestTable3, TestTable3Setter, TestTable3Finder, TestTable3OrderBy> byLoginCount(OrderBy.Order order) {
        appendOrder("login_count", order);
        return conjunction;
    }
}