package com.fsryan.annotationprocessor.generator.code;

import com.fsryan.forsuredb.annotationprocessor.generator.code.resolver.ResolverGeneratorTest;
import com.fsryan.forsuredb.api.FSJoin;
import com.fsryan.forsuredb.api.FSProjection;
import com.fsryan.forsuredb.api.ForSureInfoFactory;
import com.fsryan.forsuredb.api.RelationalResolver;
import com.fsryan.forsuredb.api.TypedRecordContainer;
import com.google.common.collect.BiMap;
import com.google.common.collect.ImmutableBiMap;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;

/**
 * <p>
 *   This is an auto-generated class. DO NOT modify it!
 * </p>
 * <p>
 *   Entry point for querying the test_table_2 table. You can access
 *   this {@link com.fsryan.forsuredb.api.Resolver} via the generated static
 *   method in the ForSure class:
 *   <pre>
 *     {@code
 *             ForSure.testTable2().find()
 *             .byIdLessThan(23545494583L)
 *             .andFinally()
 *             .get();
 *     }
 *   </pre>
 * </p>
 * @author <a href="https://github.com/ryansgot/forsuredbcompiler">forsuredbcompiler</a>
 * @see Resolver
 */
public class TestTable2Resolver extends RelationalResolver<ResolverGeneratorTest, TypedRecordContainer, TestTable2, TestTable2Setter, TestTable2Finder, TestTable2OrderBy> {
    public static final String TABLE_NAME = "test_table_2";

    public static final String[] columns = {"_id","created","deleted","modified","test_table_3_id",};

    public static final FSProjection PROJECTION = new FSProjection() {
        @Override
        public String tableName() {
            return TABLE_NAME;
        }

        @Override
        public String[] columns() {
            return columns;
        }
    };

    private static final ImmutableBiMap<String, String> COLUMN_TO_METHOD_NAME_BI_MAP = new ImmutableBiMap.Builder<String, String>()
            .put("_id", "id")
            .put("created", "created")
            .put("deleted", "deleted")
            .put("modified", "modified")
            .put("test_table_3_id", "testTable3Id")
            .build();

    public TestTable2Resolver(ForSureInfoFactory infoFactory) {
        super(infoFactory);
    }

    @Override
    public BiMap<String, String> columnNameToMethodNameBiMap() {
        return COLUMN_TO_METHOD_NAME_BI_MAP;
    }

    /**
     * <p>
     *   Add a join to test_table_3 on test_table_2.test_table_3_id = test_table_3._id
     *   to the query
     * </p>
     */
    public TestTable2Resolver joinTestTable3(final FSJoin.Type type) {
        addJoin(new FSJoin() {
            @Override
            public FSJoin.Type type() {
                return type;
            }

            @Override
            public String parentTable() {
                return "test_table_3";
            }

            @Override
            public String parentColumn() {
                return "_id";
            }

            @Override
            public String childTable() {
                return "test_table_2";
            }

            @Override
            public String childColumn() {
                return "test_table_3_id";
            }
        }, TestTable3Resolver.PROJECTION);
        return this;
    }

    /**
     * <p>
     *   Add a join to test_table on test_table.test_table_2_id = test_table_2._id
     *   to the query
     * </p>
     */
    public TestTable2Resolver joinTestTable(final FSJoin.Type type) {
        addJoin(new FSJoin() {
            @Override
            public FSJoin.Type type() {
                return type;
            }

            @Override
            public String parentTable() {
                return "test_table_2";
            }

            @Override
            public String parentColumn() {
                return "_id";
            }

            @Override
            public String childTable() {
                return "test_table";
            }

            @Override
            public String childColumn() {
                return "test_table_2_id";
            }
        }, TestTableResolver.PROJECTION);
        return this;
    }

    @Override
    public Class<TestTable2> getApiClass() {
        return TestTable2.class;
    }

    @Override
    public Class<TestTable2Setter> setApiClass() {
        return TestTable2Setter.class;
    }

    @Override
    public FSProjection projection() {
        return PROJECTION;
    }

    @Override
    protected TestTable2Finder newFinderInstance() {
        return new TestTable2Finder(this);
    }

    @Override
    protected TestTable2OrderBy newOrderByInstance() {
        return new TestTable2OrderBy(this);
    }

    @Override
    public String tableName() {
        return TABLE_NAME;
    }
}
